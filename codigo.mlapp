classdef methodSelector < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        NumiiSolveUIFigure              matlab.ui.Figure
        NumiiSolveLabel                 matlab.ui.control.Label
        MathproblemIdoitforyouLabel     matlab.ui.control.Label
        ChooseyourtypeofproblemButtonGroup  matlab.ui.container.ButtonGroup
        NolinearequationButton_2        matlab.ui.control.ToggleButton
        NumericalintegrationButton_2    matlab.ui.control.ToggleButton
        NolinearequationsystemButton_2  matlab.ui.control.ToggleButton
        DiferentialequationsystemButton_2  matlab.ui.control.ToggleButton
        ListBox                         matlab.ui.control.ListBox
        ListBox_2                       matlab.ui.control.ListBox
        ListBox_3                       matlab.ui.control.ListBox
        ListBox_4                       matlab.ui.control.ListBox
        uiAxesError                     matlab.ui.control.UIAxes
        EcuationEditField               matlab.ui.control.EditField
        RangeofIntervalLabel            matlab.ui.control.Label
        MinEditField_2Label             matlab.ui.control.Label
        MinEditField_2                  matlab.ui.control.NumericEditField
        MaxEditField_2Label             matlab.ui.control.Label
        MaxEditField_2                  matlab.ui.control.NumericEditField
        IterationsLabel                 matlab.ui.control.Label
        IterationsEditField             matlab.ui.control.NumericEditField
        EVALUATEButton                  matlab.ui.control.Button
        EcuationxLabel                  matlab.ui.control.Label
        XiSpinnerLabel                  matlab.ui.control.Label
        XiSpinner                       matlab.ui.control.Spinner
        InitialValueEditFieldLabel      matlab.ui.control.Label
        InitialValueEditField           matlab.ui.control.NumericEditField
        fxLabel                         matlab.ui.control.Label
        Label2                          matlab.ui.control.Label
        uiAxesFunction                  matlab.ui.control.UIAxes
        MsgLabel                        matlab.ui.control.Label
        Label_msg                       matlab.ui.control.Label
        UITable2                        matlab.ui.control.Table
        BLabel                          matlab.ui.control.Label
        AXLabel                         matlab.ui.control.Label
        UITable                         matlab.ui.control.Table
        RootLabel                       matlab.ui.control.Label
        Label_root                      matlab.ui.control.Label
        EaLabel                         matlab.ui.control.Label
        Label_ea                        matlab.ui.control.Label
        UITable3                        matlab.ui.control.Table
    end

    
    methods (Access = private)
        
        function results = func(app)
            % Everything disappears and the values are reset
            app.ListBox_4.Visible = false;
            app.ListBox_3.Visible = false;
            app.ListBox_2.Visible = false;
            app.ListBox.Visible = false;
            % Answer
            app.Label_root.Visible = false;
            app.Label_ea.Visible = false;
            app.Label_msg.Visible = false;
            app.RootLabel.Visible = false;
            app.EaLabel.Visible = false;
            app.MsgLabel.Visible = false;
            % Graph
            app.uiAxesError.BackgroundColor = [0.8118 0.9098 0.9686];
            app.uiAxesFunction.BackgroundColor = [0.8118 0.9098 0.9686];
            app.uiAxesError.Visible = false;
            app.uiAxesFunction.Visible = false;
            cla(app.uiAxesError);            
            cla(app.uiAxesFunction);
            title(app.uiAxesFunction, 'Function');
            % Tables
            app.UITable.Visible = false;
            app.UITable.Enable = 'on';
            app.UITable.Data = zeros(2);
            app.UITable2.Visible = false;
            app.UITable2.Enable = 'on';
            app.UITable2.Data = zeros(2,1);
            app.UITable3.Visible = false;
            app.AXLabel.Visible = false;
            app.BLabel.Visible = false;
            app.UITable.ColumnEditable = true;
            app.UITable2.ColumnEditable = true;
            % x#
            app.XiSpinner.Visible = false;
            app.XiSpinner.Value = 2;
            app.XiSpinnerLabel.Visible = false;
            % Initail value
            app.InitialValueEditFieldLabel.Visible = false;
            app.InitialValueEditField.Visible = false;
            app.InitialValueEditField.Value = 0;
            % Ecuation
            app.EcuationEditField.Visible = false;
            app.EcuationxLabel.Visible = false;
            app.EcuationEditField.Value = "";
            % Range
            app.MaxEditField_2.Visible = false;
            app.MaxEditField_2Label.Visible = false;
            app.MaxEditField_2.Value = 0;
            app.MinEditField_2Label.Visible = false;
            app.MinEditField_2.Visible = false;
            app.MinEditField_2.Value = 0;
            app.RangeofIntervalLabel.Visible = false;
            % Iterations
            app.IterationsLabel.Visible = false;
            app.IterationsEditField.Visible = false;
            app.IterationsEditField.Value = 1;
            % Derivative
            app.fxLabel.Visible = false;
            app.Label2.Visible = false;
        end
        
        function results = graphicate(app,min,max,h)
            % Graph the function
            title(app.uiAxesFunction, h);
            handle = matlabFunction(evalin(symengine, h));
            % Calculing the values
            position = (max-min)/100;
            x = min:position:max;
            y = handle(x);
            plot(app.uiAxesFunction,x,y,'Linewidth',2);
        end
       %{
        function [root, ea, EaR, msg] = bisection(app,h, min, max, it)
            % Parameters: app, handle, min, max, #iteretions
            handle = matlabFunction(evalin(symengine, h));
            Xi = min;
            Xu = max;
            continuar = true;
            encontrado = false;
            while(continuar)
                iteraciones = it;
                contador = 1;
                ea = 0;
                EaR=[];
                while(contador <= iteraciones)
                    Xr = (Xi+Xu)/2;
                    if(contador>1)
                        ea = abs((Xr-ea)/Xr)*100;
                        EaR = [EaR ea];
                    end
                    if(round(handle(Xr),4)== 0)
                        root = Xr;
                        contador = iteraciones;
                        encontrado = true;
                        msg = 'Success!';
                        continuar = false;
                    elseif(handle(Xr)*handle(Xi) < 0)
                        Xu = Xr;
                    elseif(handle(Xr)*handle(Xi) > 0)
                        Xi = Xr;
                    end
                    ea = Xr;
                    contador=contador+1;
                end
                if(~encontrado)
                    root = Xr;
                    if(Xi==Xu)
                        msg = 'Try with other limits.';
                        continuar = false;
                    else
                        msg = 'Try with more iterations.';
                        continuar = false;
                    end
                end
            end
        end
    
    %}     
    end

    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            func(app);
            % by default is selected Nolinearequation and Biseccion
            app.ListBox_2.Value = "Bisection";
            app.ListBox_2.Visible = true;
            % Ecuation
            app.EcuationEditField.Visible = true;
            app.EcuationxLabel.Visible = true;
            % Range
            app.MaxEditField_2.Visible = true;
            app.MaxEditField_2Label.Visible = true;
            app.MinEditField_2Label.Visible = true;
            app.MinEditField_2.Visible = true;
            app.RangeofIntervalLabel.Visible = true;
            % Iterations
            app.IterationsLabel.Visible = true;
            app.IterationsEditField.Visible = true;
            % Graph
            app.uiAxesError.Visible = true;
            app.uiAxesFunction.Visible = true;
        end

        % Selection changed function: 
        % ChooseyourtypeofproblemButtonGroup
        function ChooseyourtypeofproblemButtonGroupSelectionChanged(app, event)
            selectedButton = app.ChooseyourtypeofproblemButtonGroup.SelectedObject;
            % Everything disappears
            func(app);
            % Only what is selected appears
            switch(selectedButton)
                case app.NolinearequationButton_2
                    % by default is selected Biseccion
                    app.ListBox_2.Visible=true;
                    app.ListBox_2.Value = "Bisection";
                    % objects that it need
                    % Ecuation
                    app.EcuationEditField.Visible = true;
                    app.EcuationxLabel.Visible = true;
                    % Range
                    app.MaxEditField_2.Visible = true;
                    app.MaxEditField_2Label.Visible = true;
                    app.MinEditField_2Label.Visible = true;
                    app.MinEditField_2.Visible = true;
                    app.RangeofIntervalLabel.Visible = true;
                    % Iterations
                    app.IterationsLabel.Visible = true;
                    app.IterationsEditField.Visible = true;
                    % Graph
                    app.uiAxesError.Visible = true;
                    app.uiAxesFunction.Visible = true;
                case app.NumericalintegrationButton_2
                    app.ListBox_3.Visible=true;
                    % by default is selected Trapezoidal multiple
                    app.ListBox_3.Value = "Trapezoidal multiple";
                    % missing code
                case app.NolinearequationsystemButton_2
                    app.ListBox.Visible=true;
                    % by default is selected Gauss-Seidel
                    app.ListBox.Value = "Gauss-Seidel";
                    % objects that it need
                    % Tables
                    app.UITable.Visible = true;
                    app.UITable2.Visible = true;
                    app.AXLabel.Visible = true;
                    app.BLabel.Visible = true;
                    % Iterations
                    app.IterationsLabel.Visible = true;
                    app.IterationsEditField.Visible = true;
                    % x#
                    app.XiSpinner.Visible = true;
                    app.XiSpinnerLabel.Visible = true;
                    % Graph, only the Ea
                    app.uiAxesError.Visible = true;
                case app.DiferentialequationsystemButton_2
                    app.ListBox_4.Visible=true;
                    % by default is selected Euler
                    app.ListBox_4.Value = "Euler";
                    % missing code
            end
        end

        % Value changed function: ListBox_4
        function ListBox_4ValueChanged(app, event)
            value = app.ListBox_4.Value;
            % Everything disappears
            func(app);
            % objects that all functions need
            app.ListBox_4.Visible = true;
            % objects of each function
            if(value == "Euler")
                % missing code
            elseif(value == "Clasico Runge-kutta")
                % missing code
            end
        end

        % Value changed function: ListBox
        function ListBoxValueChanged(app, event)
            value = app.ListBox.Value;
            % Everything disappears
            func(app);
            % objects that all functions need
            app.ListBox.Visible = true;
            % Tables
            app.UITable.Visible = true;
            app.UITable2.Visible = true;
            app.AXLabel.Visible = true;
            app.BLabel.Visible = true;
            % Iterations
            app.IterationsLabel.Visible = true;
            app.IterationsEditField.Visible = true;
            % x#
            app.XiSpinner.Visible = true;
            app.XiSpinnerLabel.Visible = true;
            % objects of each function
            if(value == "Gauss-Seidel")
                %
            elseif(value == "Newton-Raphson")
                % missing code
            end
        end

        % Value changed function: ListBox_2
        function ListBox_2ValueChanged(app, event)
            value = app.ListBox_2.Value;
            % Everything disappears
            func(app);
            % objects that all functions need
            app.ListBox_2.Visible = true;
            % Ecuation
            app.EcuationEditField.Visible = true;
            app.EcuationxLabel.Visible = true;
            % Iterations
            app.IterationsLabel.Visible = true;
            app.IterationsEditField.Visible = true;
            % Graph
            app.uiAxesError.Visible = true;
            app.uiAxesFunction.Visible = true;
            % objects of each function
            if(value == "Bisection" || value == "Regular Falsi")
                % Ranges
                app.MaxEditField_2.Visible = true;
                app.MaxEditField_2Label.Visible = true;
                app.MinEditField_2Label.Visible = true;
                app.MinEditField_2.Visible = true;
                app.RangeofIntervalLabel.Visible = true;
            elseif(value == "Simple Iteration fix point")
                % Initial value
                app.InitialValueEditFieldLabel.Visible = true;
                app.InitialValueEditField.Visible = true;
            elseif(value =="Newton- Raphson")
                % Initial value
                app.InitialValueEditFieldLabel.Visible = true;
                app.InitialValueEditField.Visible = true;
                % Derivative
                app.fxLabel.Visible = true;
            end
        end

        % Value changed function: ListBox_3
        function ListBox_3ValueChanged(app, event)
            value = app.ListBox_3.Value;
            % Everything disappears
            func(app);
            % objects that all functions need
            app.ListBox_3.Visible = true;
            % objects of each function
            if(value == "Trapezoidal multiple")
                % missing code
            elseif(value == "Simpson 3/8 multiple")
                % missing code
            end
        end

        % Button pushed function: EVALUATEButton
        function EVALUATEButtonPushed(app, event)
           % It is assumed that the values entered are valid
            switch(app.ChooseyourtypeofproblemButtonGroup.SelectedObject)
                case app.NolinearequationButton_2
                    switch(app.ListBox_2.Value)
                        case "Bisection"
                            % Get the input values
                            handle = app.EcuationEditField.Value;
                            maxVal = app.MaxEditField_2.Value;
                            minVal = app.MinEditField_2.Value;
                            ite = app.IterationsEditField.Value;
                            % Call the function
                            [root, ea, Ea, msg] = bisection(handle,minVal,maxVal,ite);
                            EaSize = size(Ea); 
                            % Graph the Ea
                            xi = 1; 
                            xn = EaSize(1,2);
                            yi = min(Ea); 
                            yn = max(Ea);
                            plot(app.uiAxesError,Ea,'-o','Linewidth',2);
                            if(xn <= 1)
                                xn = inf;
                                yi = 0;
                                yn = inf;
                            end
                            display(ea);
                            app.uiAxesError.XLim = [xi xn];                           
                            app.uiAxesError.YLim = [yi yn];                           
                            % Graph the function
                            graphicate(app,minVal,maxVal,handle);
                            % Appear the Ea, Root, Msg 
                            app.EaLabel.Visible = true;
                            app.RootLabel.Visible = true;
                            app.MsgLabel.Visible = true;
                            app.Label_root.Visible = true;
                            app.Label_ea.Visible = true;
                            app.Label_msg.Visible = true;
                            % Show the data
                            app.Label_root.Text = num2str(root,'%4.5f');
                            app.Label_ea.Text = num2str(ea,'%4.5f');
                            app.Label_msg.Text = msg;
                        case "Regular Falsi"
                            %
                        case "Simple Iteration fix point"
                            %
                        case "Newton- Raphson"
                            %
                    end
                case app.NumericalintegrationButton_2
                    switch(app.ListBox_3.Value)
                        case "Trapezoidal multiple"
                            % missing code
                        case "Simpson 3/8 multiple"
                            % missing code
                    end
                case app.NolinearequationsystemButton_2
                    switch(app.ListBox.Value)
                        case "Gauss-Seidel"
                            %
                        case "Newton-Raphson"
                            % missing code
                    end
                case app.DiferentialequationsystemButton_2
                    switch(app.ListBox_4.Value)
                        case "Euler"
                            % missing code
                        case "Clasico Runge-kutta"
                            % missing code
                    end
            end
        end

        % Value changed function: XiSpinner
        function XiSpinnerValueChanged(app, event)
            value = app.XiSpinner.Value;
            % each time the value is changed, the tables are updated
            app.UITable.Data = zeros(value);
            app.UITable2.Data = zeros(value,1);
        end
    end

    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create NumiiSolveUIFigure
            app.NumiiSolveUIFigure = uifigure;
            app.NumiiSolveUIFigure.Color = [0.8118 0.9098 0.9686];
            app.NumiiSolveUIFigure.Position = [100 100 967 532];
            app.NumiiSolveUIFigure.Name = 'Numii Solve';

            % Create NumiiSolveLabel
            app.NumiiSolveLabel = uilabel(app.NumiiSolveUIFigure);
            app.NumiiSolveLabel.FontName = 'Georgia';
            app.NumiiSolveLabel.FontSize = 36;
            app.NumiiSolveLabel.FontWeight = 'bold';
            app.NumiiSolveLabel.Position = [364 463 233 45];
            app.NumiiSolveLabel.Text = 'Numii Solve';

            % Create MathproblemIdoitforyouLabel
            app.MathproblemIdoitforyouLabel = uilabel(app.NumiiSolveUIFigure);
            app.MathproblemIdoitforyouLabel.FontName = 'Berlin Sans FB';
            app.MathproblemIdoitforyouLabel.Position = [548 442 154 22];
            app.MathproblemIdoitforyouLabel.Text = 'Math problem? I do it for you!';

            % Create ChooseyourtypeofproblemButtonGroup
            app.ChooseyourtypeofproblemButtonGroup = uibuttongroup(app.NumiiSolveUIFigure);
            app.ChooseyourtypeofproblemButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @ChooseyourtypeofproblemButtonGroupSelectionChanged, true);
            app.ChooseyourtypeofproblemButtonGroup.ForegroundColor = [0 0.451 0.7412];
            app.ChooseyourtypeofproblemButtonGroup.Title = 'Choose your type of problem:';
            app.ChooseyourtypeofproblemButtonGroup.BackgroundColor = [1 1 1];
            app.ChooseyourtypeofproblemButtonGroup.FontName = 'Arial Rounded MT Bold';
            app.ChooseyourtypeofproblemButtonGroup.FontWeight = 'bold';
            app.ChooseyourtypeofproblemButtonGroup.Position = [22 350 743 77];

            % Create NolinearequationButton_2
            app.NolinearequationButton_2 = uitogglebutton(app.ChooseyourtypeofproblemButtonGroup);
            app.NolinearequationButton_2.Text = 'No linear equation';
            app.NolinearequationButton_2.BackgroundColor = [0.8235 1 0.9608];
            app.NolinearequationButton_2.FontName = 'Cambria';
            app.NolinearequationButton_2.Position = [10 24 170 22];
            app.NolinearequationButton_2.Value = true;

            % Create NumericalintegrationButton_2
            app.NumericalintegrationButton_2 = uitogglebutton(app.ChooseyourtypeofproblemButtonGroup);
            app.NumericalintegrationButton_2.Text = 'Numerical integration';
            app.NumericalintegrationButton_2.BackgroundColor = [0.9137 0.7647 0.4941];
            app.NumericalintegrationButton_2.FontName = 'Cambria';
            app.NumericalintegrationButton_2.Position = [377 24 170 22];

            % Create NolinearequationsystemButton_2
            app.NolinearequationsystemButton_2 = uitogglebutton(app.ChooseyourtypeofproblemButtonGroup);
            app.NolinearequationsystemButton_2.Text = 'No linear equation system';
            app.NolinearequationsystemButton_2.BackgroundColor = [1 1 0.7843];
            app.NolinearequationsystemButton_2.FontName = 'Cambria';
            app.NolinearequationsystemButton_2.Position = [195 24 170 22];

            % Create DiferentialequationsystemButton_2
            app.DiferentialequationsystemButton_2 = uitogglebutton(app.ChooseyourtypeofproblemButtonGroup);
            app.DiferentialequationsystemButton_2.Text = 'Diferential equation system';
            app.DiferentialequationsystemButton_2.BackgroundColor = [0.9176 0.7882 1];
            app.DiferentialequationsystemButton_2.FontName = 'Cambria';
            app.DiferentialequationsystemButton_2.Position = [565 24 170 22];

            % Create ListBox
            app.ListBox = uilistbox(app.NumiiSolveUIFigure);
            app.ListBox.Items = {'Gauss-Seidel', 'Newton-Raphson'};
            app.ListBox.ValueChangedFcn = createCallbackFcn(app, @ListBoxValueChanged, true);
            app.ListBox.BackgroundColor = [1 1 0.7843];
            app.ListBox.Position = [783 389 158 38];
            app.ListBox.Value = 'Newton-Raphson';

            % Create ListBox_2
            app.ListBox_2 = uilistbox(app.NumiiSolveUIFigure);
            app.ListBox_2.Items = {'Bisection', 'Regular Falsi', 'Simple Iteration fix point', 'Newton- Raphson'};
            app.ListBox_2.ValueChangedFcn = createCallbackFcn(app, @ListBox_2ValueChanged, true);
            app.ListBox_2.BackgroundColor = [0.8235 1 0.9608];
            app.ListBox_2.Position = [783 350 158 77];
            app.ListBox_2.Value = 'Bisection';

            % Create ListBox_3
            app.ListBox_3 = uilistbox(app.NumiiSolveUIFigure);
            app.ListBox_3.Items = {'Trapezoidal multiple', 'Simpson 3/8 multiple'};
            app.ListBox_3.ValueChangedFcn = createCallbackFcn(app, @ListBox_3ValueChanged, true);
            app.ListBox_3.BackgroundColor = [0.9137 0.7647 0.4941];
            app.ListBox_3.Position = [783 384 158 43];
            app.ListBox_3.Value = 'Trapezoidal multiple';

            % Create ListBox_4
            app.ListBox_4 = uilistbox(app.NumiiSolveUIFigure);
            app.ListBox_4.Items = {'Euler', 'Clasico Runge-kutta'};
            app.ListBox_4.ValueChangedFcn = createCallbackFcn(app, @ListBox_4ValueChanged, true);
            app.ListBox_4.BackgroundColor = [0.9176 0.7882 1];
            app.ListBox_4.Position = [783 386 158 41];
            app.ListBox_4.Value = 'Euler';

            % Create uiAxesError
            app.uiAxesError = uiaxes(app.NumiiSolveUIFigure);
            title(app.uiAxesError, 'Error')
            xlabel(app.uiAxesError, 'Iterations')
            ylabel(app.uiAxesError, 'Ea')
            app.uiAxesError.FontName = 'Arial Rounded MT Bold';
            app.uiAxesError.Box = 'on';
            app.uiAxesError.XGrid = 'on';
            app.uiAxesError.YGrid = 'on';
            app.uiAxesError.Position = [400 14 365 251];

            % Create EcuationEditField
            app.EcuationEditField = uieditfield(app.NumiiSolveUIFigure, 'text');
            app.EcuationEditField.FontWeight = 'bold';
            app.EcuationEditField.FontColor = [0 0.451 0.7412];
            app.EcuationEditField.Position = [111 287 219 28];

            % Create RangeofIntervalLabel
            app.RangeofIntervalLabel = uilabel(app.NumiiSolveUIFigure);
            app.RangeofIntervalLabel.FontName = 'Arial Rounded MT Bold';
            app.RangeofIntervalLabel.FontWeight = 'bold';
            app.RangeofIntervalLabel.FontColor = [0 0.451 0.7412];
            app.RangeofIntervalLabel.Position = [430 316 103 30];
            app.RangeofIntervalLabel.Text = 'Range of Interval';

            % Create MinEditField_2Label
            app.MinEditField_2Label = uilabel(app.NumiiSolveUIFigure);
            app.MinEditField_2Label.FontName = 'Arial Rounded MT Bold';
            app.MinEditField_2Label.FontWeight = 'bold';
            app.MinEditField_2Label.FontColor = [0 0.451 0.7412];
            app.MinEditField_2Label.Position = [373 285 26 30];
            app.MinEditField_2Label.Text = 'Min';

            % Create MinEditField_2
            app.MinEditField_2 = uieditfield(app.NumiiSolveUIFigure, 'numeric');
            app.MinEditField_2.FontName = 'Arial Rounded MT Bold';
            app.MinEditField_2.FontWeight = 'bold';
            app.MinEditField_2.FontColor = [0 0.451 0.7412];
            app.MinEditField_2.Position = [397 287 71 28];

            % Create MaxEditField_2Label
            app.MaxEditField_2Label = uilabel(app.NumiiSolveUIFigure);
            app.MaxEditField_2Label.FontName = 'Arial Rounded MT Bold';
            app.MaxEditField_2Label.FontWeight = 'bold';
            app.MaxEditField_2Label.FontColor = [0 0.451 0.7412];
            app.MaxEditField_2Label.Position = [477 286 29 30];
            app.MaxEditField_2Label.Text = 'Max';

            % Create MaxEditField_2
            app.MaxEditField_2 = uieditfield(app.NumiiSolveUIFigure, 'numeric');
            app.MaxEditField_2.FontName = 'Arial Rounded MT Bold';
            app.MaxEditField_2.FontWeight = 'bold';
            app.MaxEditField_2.FontColor = [0 0.451 0.7412];
            app.MaxEditField_2.Position = [505 287 71 28];

            % Create IterationsLabel
            app.IterationsLabel = uilabel(app.NumiiSolveUIFigure);
            app.IterationsLabel.FontName = 'Arial Rounded MT Bold';
            app.IterationsLabel.FontWeight = 'bold';
            app.IterationsLabel.FontColor = [0 0.451 0.7412];
            app.IterationsLabel.Position = [609 291 60 22];
            app.IterationsLabel.Text = 'Iterations';

            % Create IterationsEditField
            app.IterationsEditField = uieditfield(app.NumiiSolveUIFigure, 'numeric');
            app.IterationsEditField.Limits = [1 Inf];
            app.IterationsEditField.FontName = 'Arial Rounded MT Bold';
            app.IterationsEditField.FontWeight = 'bold';
            app.IterationsEditField.FontColor = [0 0.451 0.7412];
            app.IterationsEditField.Position = [676 288 89 28];
            app.IterationsEditField.Value = 1;

            % Create EVALUATEButton
            app.EVALUATEButton = uibutton(app.NumiiSolveUIFigure, 'push');
            app.EVALUATEButton.ButtonPushedFcn = createCallbackFcn(app, @EVALUATEButtonPushed, true);
            app.EVALUATEButton.BackgroundColor = [0.4706 0.6706 0.1882];
            app.EVALUATEButton.FontName = 'Yu Gothic';
            app.EVALUATEButton.FontWeight = 'bold';
            app.EVALUATEButton.FontColor = [1 1 1];
            app.EVALUATEButton.Position = [783 287 158 28];
            app.EVALUATEButton.Text = 'EVALUATE';

            % Create EcuationxLabel
            app.EcuationxLabel = uilabel(app.NumiiSolveUIFigure);
            app.EcuationxLabel.FontName = 'Arial Rounded MT Bold';
            app.EcuationxLabel.FontWeight = 'bold';
            app.EcuationxLabel.FontColor = [0 0.451 0.7412];
            app.EcuationxLabel.Position = [22 287 88 28];
            app.EcuationxLabel.Text = 'Ecuation @(x)';

            % Create XiSpinnerLabel
            app.XiSpinnerLabel = uilabel(app.NumiiSolveUIFigure);
            app.XiSpinnerLabel.FontWeight = 'bold';
            app.XiSpinnerLabel.FontColor = [0 0.451 0.7412];
            app.XiSpinnerLabel.Position = [22 288 40 28];
            app.XiSpinnerLabel.Text = 'Xi';

            % Create XiSpinner
            app.XiSpinner = uispinner(app.NumiiSolveUIFigure);
            app.XiSpinner.Limits = [2 Inf];
            app.XiSpinner.RoundFractionalValues = 'on';
            app.XiSpinner.ValueDisplayFormat = '%11g';
            app.XiSpinner.ValueChangedFcn = createCallbackFcn(app, @XiSpinnerValueChanged, true);
            app.XiSpinner.FontWeight = 'bold';
            app.XiSpinner.FontColor = [0 0.451 0.7412];
            app.XiSpinner.Position = [61 287 204 27];
            app.XiSpinner.Value = 2;

            % Create InitialValueEditFieldLabel
            app.InitialValueEditFieldLabel = uilabel(app.NumiiSolveUIFigure);
            app.InitialValueEditFieldLabel.FontWeight = 'bold';
            app.InitialValueEditFieldLabel.FontColor = [0 0.451 0.7412];
            app.InitialValueEditFieldLabel.Position = [373 285 127 32];
            app.InitialValueEditFieldLabel.Text = 'Initial Value';

            % Create InitialValueEditField
            app.InitialValueEditField = uieditfield(app.NumiiSolveUIFigure, 'numeric');
            app.InitialValueEditField.FontWeight = 'bold';
            app.InitialValueEditField.FontColor = [0 0.451 0.7412];
            app.InitialValueEditField.Position = [446 287 130 28];

            % Create fxLabel
            app.fxLabel = uilabel(app.NumiiSolveUIFigure);
            app.fxLabel.FontWeight = 'bold';
            app.fxLabel.FontColor = [0 0.451 0.7412];
            app.fxLabel.Position = [783 42 40 22];
            app.fxLabel.Text = 'f(x)'':';

            % Create Label2
            app.Label2 = uilabel(app.NumiiSolveUIFigure);
            app.Label2.HorizontalAlignment = 'right';
            app.Label2.Position = [822 42 118 22];
            app.Label2.Text = 'Label2';

            % Create uiAxesFunction
            app.uiAxesFunction = uiaxes(app.NumiiSolveUIFigure);
            title(app.uiAxesFunction, 'Function')
            xlabel(app.uiAxesFunction, 'x')
            ylabel(app.uiAxesFunction, 'f(x)')
            app.uiAxesFunction.FontName = 'Arial Rounded MT Bold';
            app.uiAxesFunction.Box = 'on';
            app.uiAxesFunction.XGrid = 'on';
            app.uiAxesFunction.YGrid = 'on';
            app.uiAxesFunction.Position = [20 14 365 251];

            % Create MsgLabel
            app.MsgLabel = uilabel(app.NumiiSolveUIFigure);
            app.MsgLabel.FontWeight = 'bold';
            app.MsgLabel.FontColor = [0 0.451 0.7412];
            app.MsgLabel.Position = [783 107 33 22];
            app.MsgLabel.Text = 'Msg:';

            % Create Label_msg
            app.Label_msg = uilabel(app.NumiiSolveUIFigure);
            app.Label_msg.HorizontalAlignment = 'right';
            app.Label_msg.VerticalAlignment = 'top';
            app.Label_msg.FontName = 'Britannic Bold';
            app.Label_msg.FontSize = 10;
            app.Label_msg.FontWeight = 'bold';
            app.Label_msg.FontColor = [1 0 0];
            app.Label_msg.Position = [783 86 157 22];
            app.Label_msg.Text = '';

            % Create UITable2
            app.UITable2 = uitable(app.NumiiSolveUIFigure);
            app.UITable2.ColumnName = '';
            app.UITable2.RowName = {};
            app.UITable2.ForegroundColor = [0 0.451 0.7412];
            app.UITable2.FontWeight = 'bold';
            app.UITable2.Position = [303 30 82 214];

            % Create BLabel
            app.BLabel = uilabel(app.NumiiSolveUIFigure);
            app.BLabel.FontSize = 16;
            app.BLabel.FontWeight = 'bold';
            app.BLabel.FontColor = [0 0.451 0.7412];
            app.BLabel.Position = [324 243 17 22];
            app.BLabel.Text = 'B';

            % Create AXLabel
            app.AXLabel = uilabel(app.NumiiSolveUIFigure);
            app.AXLabel.HorizontalAlignment = 'center';
            app.AXLabel.FontSize = 16;
            app.AXLabel.FontWeight = 'bold';
            app.AXLabel.FontColor = [0 0.451 0.7412];
            app.AXLabel.Position = [138 243 36 22];
            app.AXLabel.Text = 'AX#';

            % Create UITable
            app.UITable = uitable(app.NumiiSolveUIFigure);
            app.UITable.ColumnName = '';
            app.UITable.RowName = {};
            app.UITable.ForegroundColor = [0 0.451 0.7412];
            app.UITable.FontWeight = 'bold';
            app.UITable.Position = [24 30 264 215];

            % Create RootLabel
            app.RootLabel = uilabel(app.NumiiSolveUIFigure);
            app.RootLabel.FontWeight = 'bold';
            app.RootLabel.FontColor = [0 0.451 0.7412];
            app.RootLabel.Position = [782 170 41 22];
            app.RootLabel.Text = 'Root:';

            % Create Label_root
            app.Label_root = uilabel(app.NumiiSolveUIFigure);
            app.Label_root.HorizontalAlignment = 'right';
            app.Label_root.FontName = 'Britannic Bold';
            app.Label_root.FontSize = 18;
            app.Label_root.FontWeight = 'bold';
            app.Label_root.FontColor = [0.4706 0.6706 0.1882];
            app.Label_root.Position = [821 170 118 22];
            app.Label_root.Text = '';

            % Create EaLabel
            app.EaLabel = uilabel(app.NumiiSolveUIFigure);
            app.EaLabel.FontWeight = 'bold';
            app.EaLabel.FontColor = [0 0.451 0.7412];
            app.EaLabel.Position = [782 223 40 22];
            app.EaLabel.Text = 'Ea:';

            % Create Label_ea
            app.Label_ea = uilabel(app.NumiiSolveUIFigure);
            app.Label_ea.HorizontalAlignment = 'right';
            app.Label_ea.FontName = 'Britannic Bold';
            app.Label_ea.FontSize = 18;
            app.Label_ea.FontWeight = 'bold';
            app.Label_ea.FontColor = [0.4706 0.6706 0.1882];
            app.Label_ea.Position = [822 223 118 22];
            app.Label_ea.Text = '';

            % Create UITable3
            app.UITable3 = uitable(app.NumiiSolveUIFigure);
            app.UITable3.ColumnName = '';
            app.UITable3.RowName = {};
            app.UITable3.ForegroundColor = [0 0.451 0.7412];
            app.UITable3.FontWeight = 'bold';
            app.UITable3.Position = [859 6 82 25];
        end
    end

    methods (Access = public)

        % Construct app
        function app = methodSelector

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.NumiiSolveUIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.NumiiSolveUIFigure)
        end
    end
end